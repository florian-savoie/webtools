{% set title = 'Publication d\'article' %}
{% extends "./layout/layout_nav.html.twig" %}
{% block css %}

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

    <!-- Flipster CSS -->
    <link rel="stylesheet" href="dist/jquery.flipster.min.css">
    <link rel="stylesheet" href="../assets/vendor/css/pages/app-chat.css" />

    <link rel="stylesheet" href="../assets/css/chat.css">

    <link rel="stylesheet" href="./assets/vendor/libs/perfect-scrollbar/perfect-scrollbar.css" />
    <link rel="stylesheet" href="./assets/vendor/libs/node-waves/node-waves.css" />
    <link rel="stylesheet" href="./assets/vendor/libs/typeahead-js/typeahead.css" />
    <link rel="stylesheet" href="./assets/vendor/libs/datatables-responsive-bs5/responsive.bootstrap5.css" />
    <link rel="stylesheet" href="./assets/vendor/libs/datatables-buttons-bs5/buttons.bootstrap5.css" />
    <!-- Flipster Js -->
    <script src="dist/jquery.flipster.min.js"></script>


{% endblock %}
{% block contenu %}
<!-- Content -->
<!-- Users List Table -->
<div class="container mt-5" id="vue" hidden="">


    <!-- Basic Layout -->
    <div class="row">
        <div class="col-xl">
            <div class="card mb-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Ajouter un article </h5>
                </div>
                <div class="card-body">
                    <form id="image-form">
                        <div class="col-md-6 mb-4">
                            <div class="form-floating form-floating-outline">
                                <select id="category" name="category" class="select2 form-select" data-allow-clear="true">
                                    {% for category in categorys %}
                                        <option style="color:{{ category.color }}"  value="{{ category.id }}">{{ category.name }}</option>
                                    {% endfor %}
                                    <option style="color:{{ category.color }}" value="1000">autres "hor liste "</option>
                                </select>
                                <label for="multicol-country">Choisir une catégorie</label>
                            </div>
                        </div>

                        <div class="col-md-6 mb-4"id="selectsouscat" hidden>
                            <div class="form-floating form-floating-outline">
                                <select id="souscategory" name="souscat"  class="select2 form-select" data-allow-clear="true">
                                </select>
                                <label for="souscategory">Choisir une sous-catégorie</label>
                            </div>
                        </div>

                        <div class="form-floating form-floating-outline mb-4">
                            <input type="file" class="form-control" id="file-input" name="file-input" accept="image/*" required />
                            <label for="file-input">Ajouter une photo</label>
                        </div>
                        <div class="form-floating form-floating-outline mb-4">
                            <input type="text" class="form-control" id="title" name="title" placeholder="John Doe" required />
                            <label for="title">titre de l'article </label>
                        </div>
                        <div class="form-floating form-floating-outline mb-4">
                            <input type="text" class="form-control" id="url" name="url" placeholder="insérer l'url de l'image" required />
                            <label for="url">url de l'image de présentation</label>
                        </div>
                        <div class="form-floating form-floating-outline mb-4">
    <textarea
            id="description"
            class="form-control"
            name="description"
            placeholder="Renseigner le contenu de l'article"
            style="height: 60px"
            required
    ></textarea>
                            <label for="description">description</label>
                        </div>
                        <button type="submit" name="publication" class="btn btn-primary">envoyer</button>
                    </form>             </div>
            </div>
        </div>

    </div>

    <!-- Message addflash-->
    <div>
        <span id="message" >{{ messageFlash }}</span>

        <div class="container d-flex justify-content-center mt-5">
            <!-- Timeline -->
            <div id="toast-container" class="toast-top-center" >
                <div class="toast toast-success" aria-live="polite" style="display: block;">
                    <button type="button" class="toast-close-button" role="button">×</button>
                    <div class="toast-title">Votre article a bien etait envoyer</div>
                </div>
            </div>

        </div>
        <div id="toastError" >
            <div id="toast-container" class="toast-top-center">
                <div class="toast toast-error" aria-live="assertive" style="display: block; ">
                    <div class="toast-message">Votre article n'a pas pu etre Envoyé</div>
                </div>
            </div>
        </div>
    </div>
    <!-- Message addflash-->
        </div>





        {% endblock %}

        {% block js %}

            <script src="./assets/vendor/assets/js/form-basic-inputs.js"></script>

            <script>

let category = document.getElementById("category");
let souscategory = document.getElementById("souscategory");
let divsouscat = document.getElementById("selectsouscat");
category.onchange = function() {
    let idcategory = category.value;

    // Effectuer la requête Ajax
    $.ajax({
        url: '/show-souscategory',
        method: 'POST',
        data: {
            action: 'show-souscategory',
            idcategory: idcategory,
        },
        dataType: 'json', // Attendre une réponse JSON du serveur
        success: function (response) {
            if (response.hasOwnProperty('error')) {
                // Erreur lors de l'ajout du vote
                console.log('Erreur lors de l\'ajout du vote :', response.error);
            } else {
                souscategory.innerHTML = '';
                if (response.length > 0) {
                    for (let i = 0; i < response.length; i++) {
                        divsouscat.hidden = false;
                        let sousCat = response[i];
                        souscategory.innerHTML += `<option value="${sousCat.id}">${sousCat.name}</option>`;
                    }                        souscategory.innerHTML += `<option value="0">autre ("hors liste " )</option>`;

                } else {
                    souscategory.innerHTML += `<option value="0">autre ("hors liste " )</option>`;
                    divsouscat.hidden = true; // Cacher l'élément
                }
            }
        },
        error: function (xhr, status, error) {
            // Gérer les erreurs lors de la requête Ajax
            console.error('Une erreur s\'est produite lors de la requête :', error);
        }
    });
};

$('.addsouscategory').click(function() {

    let name = $('#souscategory-input-' + $(this).data('idcategory')).val();
    let idcategory = $(this).data('idcategory');

    $.ajax({
        url: '/addsouscategory',
        type: 'post',
        dataType: 'json',
        data: {
            action: 'add-souscategory',
            name: name,
            idcategory: idcategory
        },
        success: function(response) {
            // Faire quelque chose avec la réponse du serveur, par exemple :
            // alert(response);
            // ou mettre à jour la liste des sous-catégories
            // $('.subcategories-list').append('<li>' + name + '</li>');
        },
        error: function(xhr, status, error) {
            // Gérer l'erreur
        }
    });

});

function compressAndAddImage(img, formData, callback) {
    // Créer un canvas qui permet de dessiner l'image réduite
    const canvas = document.createElement("canvas");
    // Définir la largeur et la hauteur maximales de l'image
    let maxWidth = 640;
    let maxHeight = 400;

    // Récupérer les dimensions de l'image
    let width = img.width;
    let height = img.height;

    // Si la largeur de l'image est supérieure à la largeur maximale
    if (width > maxWidth) {
        // Ajuster la hauteur de l'image de façon proportionnelle
        height *= maxWidth / width;
        // Mettre la largeur de l'image à la largeur maximale
        width = maxWidth;
    }

    // Si la hauteur de l'image est supérieure à la hauteur maximale
    if (height > maxHeight) {
        // Ajuster la largeur de l'image de façon proportionnelle
        width *= maxHeight / height;
        // Mettre la hauteur de l'image à la hauteur maximale
        height = maxHeight;
    }

    // Fixer la largeur et la hauteur du canvas
    canvas.width = width;
    canvas.height = height;

    // Dessiner l'image sur le canvas avec les dimensions réduites
    const ctx = canvas.getContext("2d");
    ctx.drawImage(img, 0, 0, width, height);

    // Convertir le canvas en données d'URL pour obtenir l'image compressée
    const compressedImageData = canvas.toDataURL("image/jpeg", 0.9);

    // Ajouter les données de l'image compressée à FormData
    formData.append("image", compressedImageData);

    // Appeler la fonction de rappel
    callback();
}

function processForm(event) {
    event.preventDefault();

    const fileInput = document.getElementById("file-input");
    const file = fileInput.files[0];

    if (!file) {
        alert("Veuillez choisir une image.");
        return;
    }

    const formData = new FormData();
    formData.append("description", document.querySelector("#description").value);
    formData.append("url", document.querySelector("#url").value);
    formData.append("category", document.querySelector("#category").value);
    formData.append("title", document.querySelector("#title").value);

    let souscat = document.querySelector("#souscategory").value;
    if (souscat == 0 || souscat === undefined || souscat === "" || souscat === null || souscat == 0){
        souscat = 0 ;
    }

    formData.append("souscat", souscat);

    const reader = new FileReader();
    reader.onload = function (event) {
        const img = new Image();
        img.onload = function () {
            compressAndAddImage(img, formData, function () {
                const xhr = new XMLHttpRequest();
                xhr.open("POST", "/addarticleajax");
                xhr.onload = function () {
                    if (xhr.status === 200) {
                        var response = JSON.parse(xhr.response); // Analyser la réponse JSON
                        console.log(response);
                        document.getElementById("image-form").reset();
                        succesSendMessage();
                    } else {
                        console.error(xhr.response);
                        succesSendMessageerror();

                    }
                };
                xhr.send(formData);
            });
        };
        img.src = event.target.result;
    };
    reader.readAsDataURL(file);
  // window.location.reload();
}

const form = document.getElementById("image-form");
form.addEventListener("submit", processForm);


// Récupère l'élément div
var toast = document.getElementById('toast-container');
var toasterror = document.getElementById('toastError');
var message = document.getElementById('message').textContent;
toast.style.display = 'none';
toasterror.style.display = 'none';

function succesSendMessage() {
    toast.style.display = 'block';
    setTimeout(function () {
        toast.style.display = 'none';
    }, 3000);
}

function succesSendMessageerror() {
    toasterror.style.display = 'block';
    setTimeout(function () {
        toasterror.style.display = 'none';
    }, 3000);
}

if (message == "success") {
    succesSendMessage();
} else if (message == "error") {
    succesSendMessageerror();
}

window.onload = function () {
    var vue = document.getElementById('vue');
    vue.hidden = false;
};
        </script>

        {% endblock %}